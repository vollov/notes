git remote set-url origin git@github.com:vollov/xxx.git

references:
http://progit.org/book/
http://gitimmersion.com/
http://git-scm.com/book
http://ftp.newartisans.com/pub/git.from.bottom.up.pdf
http://www-cs-students.stanford.edu/~blynn/gitmagic/

/////////////////////////////////////////////////////
Global setup:
 Set up git
  git config --global user.name "dustin.zhang"
  git config --global user.email vollov.ca@gmail.com
      
Next steps:
  mkdir da
  cd da
  git init
  touch README
  git add README
  git commit -m 'first commit'
  git remote add origin git@github.com:dike-zhang/da.git
  git remote add origin git@github.com:vollov/nodejs-login.git
  git push -u origin master
      
Existing Git Repo?
  cd existing_git_repo
  git remote add origin git@github.com:dike-zhang/da.git
  git push -u origin master

cd $repo_dir

push tag to remote
$git push --tags

git push a branch
$git push -u origin plugin
$git fetch origin
$git checkout --track origin/plugin

git pull branches
$for remote in `git branch -r`; do git branch --track $remote; done
$git fetch --all
$git pull --all

[1] initialize a repository
$ git init

[2] Cloning an Existing Repository
$ git clone git://github.com/schacon/grit.git mygrit

[3] Checking the Status
$ git status

[4] Tracking New Files
$ git add new.file

[5] Staging Modified Files
$ git add modified.file

[6] To see what you�ve changed but not yet staged
$ git diff

[7] Compares your staged changes to your last commit:
$ git diff --cached
$ git diff --staged

[8] Committing changes
git commit -m 'message'

[9] Commit by skipping the Staging Area
$ git commit -a -m 'added new benchmarks'

[10] stage Removing Files
$ git rm removed.file

[11] Keep the file in working tree but remove it from staging area
$ git rm --cached readme.txt

[12] removes all files that have the .log extension in the log/ directory
$ git rm log/\*.log

[13] Moving Files
$ git mv file_from file_to

[14] Viewing the Commit History
$ git log
$ git log --pretty=oneline
$ git log --pretty=format:"%h - %an, %ar : %s"

//////////////////////////////////////////////
Option Description of Output
%H Commit hash
%h Abbreviated commit hash
%T Tree hash
%t Abbreviated tree hash
%P Parent hashes
%p Abbreviated parent hashes
%an Author name
%ae Author e-mail
%ad Author date (format respects the �date= option)
%ar Author date, relative
%cn Committer name
%ce Committer email
%cd Committer date
%cr Committer date, relative
%s Subject
/////////////////////////////////////////////

[15] set ignore files
cat .gitignore
////////////////////
.classpath
.project
target/
.settings/
.test-output/
/////////////////////

[16] show the last two log entries
$ git log -p -2

[17] show abbreviated stats
$ git log --stat

[18] Changing Your Last Commit
$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend
All three of these commands end up with a single commit � 
the second commit replaces the results of the first.

[19] Unstaging a Staged File
$ git reset HEAD staged.file

[20] Unmodifying a Modified File (revert file back to last committed)
$ git checkout -- benchmarks.rb

[21] Show remote servers
$ git remote -v
origin git://github.com/schacon/ticgit.git

[22] To add a new remote Git repository as a shortname
run git remote add [shortname] [url]:
$ git remote
origin
$ git remote add pb git://github.com/paulboone/ticgit.git
$ git remote -v
origin git://github.com/schacon/ticgit.git
pb git://github.com/paulboone/ticgit.git

[23] fetch all the information that pb has but that you don�t yet have in your repository
$ git fetch pb
remote: Counting objects: 58, done.
remote: Compressing objects: 100% (41/41), done.
remote: Total 44 (delta 24), reused 1 (delta 0)
Unpacking objects: 100% (44/44), done.
From git://github.com/paulboone/ticgit
* [new branch] master -> pb/master
* [new branch] ticgit -> pb/ticgit

[24] get data from a remote projects
$ git fetch [remote-name]

[25] Pushing to remote server
git push [remote-name] [branch-name]
$ git push origin master


[30] Listing Your Tags
$ git tag

[31] search for tags at the 1.4.2 series
$ git tag -l 'v1.4.2.*'

[32] Create Annotated Tags
$ git tag -a v1.4 -m 'my version 1.4'

[33] Lightweight Tags
$ git tag v1.4-lw

[34] remove a tag
git tag -d tagname

[35] push tags:
git push --tags

[36] to push a single tag:
git push origin <tag_name>

git remote set-url origin git@github.com:vollov/backbone-tutorial.git
////////////////////////////////////////////////////////
  Branching
////////////////////////////////////////////////////////
[] list branches
$ git branch
* master

-a shows all local and remote branches
zhangdu@MLIW4N2VWN1 /c/usr/mfc/builds/waterloo (master)
$ git branch -a
  13.4.0
* master
  remotes/origin/13.4.0
  remotes/origin/master

-r shows only remote branches.
zhangdu@MLIW4N2VWN1 /c/usr/mfc/builds/waterloo (master)
$ git branch -r
  origin/13.4.0
  origin/master


[] push local master to remote master
$git push origin master

[] switch branches
git checkout master

[] pull changes from git server
git pull origin master
or ---
git remote add shared ../hello.git
git branch --track shared master
git pull shared master
cat README


  how to push a new branch to remote server.
[] to push all of the changes from your plugin branch to a plugin branch on the GitHub repository
git push -u origin plugin

You might find yourself in a situation where you have a branch that you created locally and want to push to a remote git repository. Suppose you created a local plugin branch that you want to expose to others through your GitHub repository but you are not yet confident enough to put it into the master branch. Here is the command you would execute to push all of the changes from your plugin branch to a plugin branch on the GitHub repository:
$git push -u origin plugin
This tells git to push changes from your plugin branch to the plugin branch on the origin repository. If origin does not have a plugin branch, it is created on the fly. The -u tells git that you want to be able to easily push and pull changes to that branch in the future.

Now, say your friend Bob wants to access the hot new feature you just pushed to the new branch on the GitHub repository. All Bob needs to do is update his local repository with all of the changes on the GitHub repository and create a local branch where he can play with the new code.

$git fetch origin
$git checkout --track origin/plugin
The first command updates Bob's repository with the changes from the remote repository. The second command creates a local branch named plugin that matches the origin/plugin branch and 
tells git that Bob wants to be able to easily push and pull from the branch on GitHub. Bob can now play with the code, commit his own changes and git push them back up to the GitHub 
repository.


UPDATE: As Andy mentioned, you probably want to set the upstream so you can easily interact with the remote branch in the future. Hence, I added -u to the original git push example.
